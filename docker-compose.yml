# Важно: при запуске docker-compose надо указать файл с env-переменными, например, файл с тестовыми значениями .env.sample (реальные данные в репозитории не храним)
# docker-compose --env-file .env.sample up
# если рядом с docker-compose.yaml лежит файл .env, то docker-compose будет использовать его по-умолчанию

# версия синтаксиса
version: "3.9"

# Описываем образы, каждый из которых соответствует отдельному приложению (база данных, server и client)
services:
  # MongoDB ставим впереди server, так как server зависит от этого сервиса
  mongo:
    # Здесь именно image, потому что мы его сами не пишем, он будет взят с докерхаба
    image: mongo

    # Можно не задавать имя контейнера, но мы зададим через env-переменную, чтобы потом использовать эту переменную в качсетве хоста для подключения к БД
    container_name: ${MONGO_CONTAINER}

    # Всегда перезапускать контейнер, когда он останавливается
    restart: always

    # Эти переменные будут проброшены внутрь контейнера mongo и из них будут браться указаные значения для создаваемой БД
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}

    # Связываем файлы хоста (папка ./mongo) с файлами в контейнере /data/db
    volumes:
      - ./mongo:/data/db

    # Проброс порта — на какой порт хоста какой порт контейнера
    # Свзяваем порт подключения к БД Mongo внутри контейнера с портом на внешней машине
    # По-умолчанию,порт подключения в Mongo - 27017. Оставим без изменений и свяжем с таким же портом на хосте
    ports:
      - '${MONGO_PORT}:${MONGO_PORT}'

    # На всякий случай дополнительно явно указали env-переменные
    env_file:
      - ./.env

##############################################################################

  # Образ для серверного приложения (которое общается с БД и предоставляет апи форума, темы и пр.)
  server:
    # Имя контейнера после того, как контейнер будет запущен
    container_name: ${API_SERVER_CONTAINER}

    # Задаем имя создаваемого образа
    image: prackicum-server-image
      
    # Как будем создавать контейнер? Какой Dockerfile использовать?
    build:
      # Dockerfile берем из текущей папки
      context: .
      # Имя докер-файла
      dockerfile: Dockerfile.server
      # Аргументы, которые будут переданы в процесс сборки образа
      args:
        API_SERVER_PORT: ${API_SERVER_PORT}
      
    # Всегда перезапускать контейнер, когда он останавливается
    restart: always
      
    # Связываем порт приложения на хост-машине с портом приложения внутри контейнера
    ports:
      - "${API_SERVER_PORT}:${API_SERVER_PORT}"

    # Т.к. Mongo база данных запускается не мгновенно после запуска контейнера, нам надо дождаться пока база данных будет инициализирована и только после этого запускать
    # Альтернативой является использование wait-for в Dockerfile.server
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:${MONGO_PORT}/${MONGO_INITDB_DATABASE} --quiet

    # env-переменные, которые будут доступны внутри контейнера
    # При необходимости, внутрь контейнера можно передать env-переменные, содержащий данные для подключения к БД. В текущей реализации, вся необходимая информация содержится в DATABASE_URL
    environment:
      API_SERVER_PORT: ${API_SERVER_PORT}
      DATABASE_URL: ${DATABASE_URL}

    # Контейнер prakticum-server-container должен быть запущен после того, как запуститься кконтейнер mongo и пройдет инициализация БД (то есть надо какое-то время подождать. Для этого внутри Dockerfile.server используется скрипт wait-for)
    depends_on:
      - mongo

    # На всякий случай дополнительно явно указали env-переменные
    env_file:
      - ./.env

##############################################################################

  # Образ для клиентского приложения (которое раздает статику)
  client:
    # Имя контейнера после того, как контейнер будет запущен
    container_name: ${CLIENT_CONTAINER}

    # Задаем имя создаваемого образа
    image: prakticum-client-image

    # Как будем создавать контейнер? Какой Dockerfile использовать?
    build:
      # Dockerfile берем из текущей папки
      context: .
      # Имя докер-файла
      dockerfile: Dockerfile.client
      # Аргументы, которые будут переданы в процесс сборки образа
      args:
        CLIENT_PORT: ${CLIENT_PORT}
      
    # Всегда перезапускать контейнер, когда он останавливается
    restart: always

    # Связываем порт приложения на хост-машине с портом приложения внутри контейнера
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"

    # env-переменные, которые будут доступны внутри контейнера
    environment:
      CLIENT_PORT: ${CLIENT_PORT}
      API_SERVER_HOST: ${API_SERVER_HOST}
      API_SERVER_PORT: ${API_SERVER_PORT}

    # Запускать контейнер после запуска контейнера server
    depends_on:
      - server

##############################################################################

  # Образ nginx https://hub.docker.com/_/nginx
  nginx:
    # Здесь именно image, потому что мы его сами не пишем, он будет взят с докерхаба
    image: nginx

    # Имя контейнера. Можно не задавать
    container_name: ${NGINX_CONTAINER}

    # Всегда перезапускать контейнер, когда он останавливается
    restart: always

    # Эти переменные будут проброшены внутрь контейнера mongo и из них будут браться указаные значения для создаваемой БД
    # Т.к. nginx, SSR-сервер, АПИ-сервер и БД будут запущены в докере на одном сервере, для проксирования запросов nginx будет обращаться по имени контейнера и порту
    environment:
      CLIENT_CONTAINER: ${CLIENT_CONTAINER}
      CLIENT_PORT: ${CLIENT_PORT}
      API_SERVER_CONTAINER: ${API_SERVER_CONTAINER}
      API_SERVER_PORT: ${API_SERVER_PORT}

    # Связываем файлы хоста с контейнером
    # nginx.conf из текущего каталога хоста должен быть смонтирован в качестве файла /etc/nginx/nginx.conf в контейнере Docker
    # ro - read only
    volumes:
     - ./nginx.conf:/etc/nginx/nginx.conf:ro

    # Проброс порта — на какой порт хоста какой порт контейнера
    # Свзяваем порты, которые nginx слушает внутри контейнера с внешними портами
    # Традиционно, порт 80 для подключений по http и 443 для https
    ports:
      - '${NGINX_EXTERNAL_HTTP_PORT}:${NGINX_EXTERNAL_HTTP_PORT}'
      - '${NGINX_EXTERNAL_HTTPS_PORT}:${NGINX_EXTERNAL_HTTP_PORT}'

    depends_on:
      - mongo
      - server
      - client
